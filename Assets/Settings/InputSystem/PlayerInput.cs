//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""FishingInputActions"",
            ""id"": ""24adc3fd-ad14-4d03-9eb4-9401e80978df"",
            ""actions"": [
                {
                    ""name"": ""Casting"",
                    ""type"": ""Button"",
                    ""id"": ""54e0c19c-adea-46aa-bd72-81029ff18eda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attracting"",
                    ""type"": ""Button"",
                    ""id"": ""9c042b2b-52a6-486d-a5ca-b908b5c0464a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c843673b-75c0-4a0f-96aa-366d431fc592"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Casting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e87f8238-64ec-41e3-8c9b-df08bb18f26e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attracting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FishingInputActions
        m_FishingInputActions = asset.FindActionMap("FishingInputActions", throwIfNotFound: true);
        m_FishingInputActions_Casting = m_FishingInputActions.FindAction("Casting", throwIfNotFound: true);
        m_FishingInputActions_Attracting = m_FishingInputActions.FindAction("Attracting", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FishingInputActions
    private readonly InputActionMap m_FishingInputActions;
    private List<IFishingInputActionsActions> m_FishingInputActionsActionsCallbackInterfaces = new List<IFishingInputActionsActions>();
    private readonly InputAction m_FishingInputActions_Casting;
    private readonly InputAction m_FishingInputActions_Attracting;
    public struct FishingInputActionsActions
    {
        private @PlayerInput m_Wrapper;
        public FishingInputActionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Casting => m_Wrapper.m_FishingInputActions_Casting;
        public InputAction @Attracting => m_Wrapper.m_FishingInputActions_Attracting;
        public InputActionMap Get() { return m_Wrapper.m_FishingInputActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingInputActionsActions set) { return set.Get(); }
        public void AddCallbacks(IFishingInputActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingInputActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingInputActionsActionsCallbackInterfaces.Add(instance);
            @Casting.started += instance.OnCasting;
            @Casting.performed += instance.OnCasting;
            @Casting.canceled += instance.OnCasting;
            @Attracting.started += instance.OnAttracting;
            @Attracting.performed += instance.OnAttracting;
            @Attracting.canceled += instance.OnAttracting;
        }

        private void UnregisterCallbacks(IFishingInputActionsActions instance)
        {
            @Casting.started -= instance.OnCasting;
            @Casting.performed -= instance.OnCasting;
            @Casting.canceled -= instance.OnCasting;
            @Attracting.started -= instance.OnAttracting;
            @Attracting.performed -= instance.OnAttracting;
            @Attracting.canceled -= instance.OnAttracting;
        }

        public void RemoveCallbacks(IFishingInputActionsActions instance)
        {
            if (m_Wrapper.m_FishingInputActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingInputActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingInputActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingInputActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingInputActionsActions @FishingInputActions => new FishingInputActionsActions(this);
    public interface IFishingInputActionsActions
    {
        void OnCasting(InputAction.CallbackContext context);
        void OnAttracting(InputAction.CallbackContext context);
    }
}
